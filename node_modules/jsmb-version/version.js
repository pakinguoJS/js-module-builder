var fs = require('fs');
var path = require('path');
var VERSIONTYPE = 'time'; // 取值为time或者md5;
var VERSIONLEN = 8; // 如果使用md5，默认取9位


function cssVersion() {

}

function cmdVersion(base, file, map, fileType) {
    fileType ? null : fileType = /\.(tpl|html|htm)$/;
    if (!fileType.test(file)) {
        return;
    }

    // 匹配seajs的use方法
    var content = fs.readFileSync(file, 'utf8');
    var matchList = content.match(/seajs.use\s*\([^\)]*\)/g);

    // 若匹配不到相关模块，则返回
    if(!matchList){
        return;
    }

    // 记录匹配到的模块列表
    var cacheList = {};

    matchList.forEach(function (file) {
        // 先将匹配出的seajs.use(xxx)过滤为xxx
        file = eval(file.replace(/seajs\.use\s*\(|\)/g, ''));

        // 如果是数组，则需要再循环; 然后递归匹配使用到的模块
        if (file instanceof Array) {
            file.forEach(function (m) {
                m = mapFile(m);
                if(recode(m)){
                    rTravel(m);
                }
            });
        } else {
            file = mapFile(file);
            if(recode(file)){
                rTravel(file);
            }
        }
    });

    /**
     * 缓存匹配的结果，并存储其相对与base的路径
     * @param {String} item
     */
    function recode(item) {
        if (!(item in cacheList)) {
            cacheList[item] = path.relative(base, item).replace(/\\/g, '/');
            return true;
        } else {
            return false;
        }
    }

    /**
     * 对模块进行map，根据传入参数转换
     * @param {String} item
     * @returns {String}    返回map后的模块
     */
    function mapFile(item, curr) {
        // 先确保模块是以.js后缀
        /\.js$/.test(item) ? null : item += '.js';

        if (map && map instanceof Array) {
            map.forEach(function (i) {
                item = item.replace(i[0], i[1]);
            });
        }

        // 如果是以http或file开头的，则直接返回模块；
        // 如果是以.或..等相对路径开头的，则返回相对于当前递归模块的路径;
        // 如果是以/或模块文件夹名称开头的，则返回相对于base的路径。
        if(/^(http|file)/.test(item)){
            return item;
        }else if(/^\./.test(item)){
            return path.join(path.dirname(curr), item).replace(/\\/g, '/');
        }else{
            return path.join(base, item).replace(/\\/g, '/');
        }
    }

    /**
     * 递归匹配查找模块
     * @param {String} filePath
     */
    function rTravel(filePath) {
        if (fs.existsSync(filePath)) {
            var content = fs.readFileSync(filePath, 'utf8');
            var matchList = content.match(/require\s*\([^\)]*\)|require\.async\s*\(.*,\s*f/g);

            if(!matchList){
                return;
            }

            matchList.forEach(function (file) {
                // 先将匹配出的 require(xxx) 和 require.async(xxx, f 过滤为xxx
                file = eval(file.replace(/require\s*\(|\)|require\.async\s*\(|,\s*f/g, ''));

                // 如果是数组，则需要再循环
                if (file instanceof Array) {
                    file.forEach(function (m) {
                        m = mapFile(m, filePath);
                        if(recode(m)){
                            rTravel(m);
                        }
                    });
                } else {
                    file = mapFile(file, filePath);
                    if(recode(file)){
                        rTravel(file);
                    }
                }
            });
        }
    }

    // 将获取到的模块列表进行时间戳（左移3位）或md5映射
    var output = [];
    var item;
    if(VERSIONTYPE === 'time'){
        for(item in cacheList){
            if(fs.existsSync(item)){
                output.push([cacheList[item], cacheList[item] + '?' + (fs.statSync(item).mtime.getTime() << 3)]);
            }
        }
    }else{
        var md5 = require('md5');
        for(item in cacheList){
            if(fs.existsSync(item)){
                output.push([cacheList[item], cacheList[item] + '?' + md5(fs.readFileSync(item)).substring(0, VERSIONLEN)]);
            }
        }
    }

    return "seajs.config({map:" + JSON.stringify(output) + "})";
}


function amdVersion() {

}


module.exports = function(type, len){
    type ? VERSIONTYPE = type : null;
    len ? VERSIONLEN = len : null;

    return {
        css: cssVersion,
        cmd: cmdVersion
    };
}