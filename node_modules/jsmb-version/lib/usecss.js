var fs = require('fs');
var path = require('path');


module.exports = cssVersion;

/**
 * 对符合后缀的文件进行CMD模块查找和版本号编译
 * @param {String} base         项目的根路径
 * @param {String|Array} file   需要设置版本号的文件
 * @param {Object} options      额外设置的参数，支持的字段有：
 * {
 *      fileType: /\.(tpl|html|htm)$/,  // 严格规定需要设置版本号的文件的后缀，如果不属于指定类型，则不做版本号处理
 *      map: []                         // 对路径中出现某些需要替换的字符串或正则的map表, 如: [[/{lang}/, 'en']]
 * }
 * @param {String} versionType  版本号的类型，时间戳或md5
 * @param {Number} versionLen   版本号长度
 * @returns {String}
 */
function cssVersion(base, file, options, versionType, versionLen) {
    options.fileType ? null : options.fileType = /\.(tpl|html|htm)$/;
    if (!options.fileType.test(file)) {
        return;
    }

    // 匹配seajs的use方法
    var content = fs.readFileSync(file, 'utf8');
    var matchList = content.match(/seacss.use\s*\([^\)]*\)/g);

    // 若匹配不到相关模块，则返回
    if(!matchList){
        return;
    }

    // 记录匹配到的模块列表
    var cacheList = {};

    matchList.forEach(function (file) {
        // 先将匹配出的seacss.use(xxx)过滤为xxx
        file = eval(file.replace(/seacss\.use\s*\(|\)/g, ''));

        // 如果是数组，则需要再循环; 然后递归匹配使用到的模块
        if (file instanceof Array) {
            file.forEach(function (m) {
                recode(mapFile(m));
            });
        } else {
            recode(mapFile(file));
        }
    });

    /**
     * 缓存匹配的结果，并存储其相对与base的路径
     * @param {String} item
     */
    function recode(item) {
        if (!(item in cacheList)) {
            cacheList[item] = path.relative(base, item).replace(/\\/g, '/');
            return true;
        } else {
            return false;
        }
    }

    /**
     * 对模块进行map，根据传入参数转换
     * @param {String} item
     * @returns {String}    返回map后的模块
     */
    function mapFile(item, curr) {
        // 先确保模块是以.css后缀
        /\.(css)$/.test(item) ? null : item += '.css';

        // 先除去路径中可能存在的变量
        if (options.map && options.map instanceof Array) {
            options.map.forEach(function (i) {
                item = item.replace(i[0], i[1]);
            });
        }

        // 如果是以http或file开头的，则直接返回模块；
        // 如果是以.或..等相对路径开头的，则返回相对于当前递归模块的路径;
        // 如果是以/或模块文件夹名称开头的，则返回相对于base的路径。
        if(/^(http|file)/.test(item)){
            return item;
        }else if(/^\./.test(item)){
            return path.join(path.dirname(curr), item).replace(/\\/g, '/');
        }else{
            return path.join(base, item).replace(/\\/g, '/');
        }
    }


    // 将获取到的模块列表进行时间戳或md5映射
    var output = [];
    var item;
    if(versionType === 'time'){
        for(item in cacheList){
            if(fs.existsSync(item)){
                output.push([cacheList[item], cacheList[item] + '?' + fs.statSync(item).mtime.getTime()]);
            }
        }
    }else{
        var md5 = require('md5');
        for(item in cacheList){
            if(fs.existsSync(item)){
                output.push([cacheList[item], cacheList[item] + '?' + md5(fs.readFileSync(item)).substring(0, versionLen)]);
            }
        }
    }

    return "seacss.config({map:" + JSON.stringify(output) + "})";
}
